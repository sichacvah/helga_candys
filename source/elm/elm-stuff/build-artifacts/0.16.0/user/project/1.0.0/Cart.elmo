Elm.Cart = Elm.Cart || {};
Elm.Cart.make = function (_elm) {
   "use strict";
   _elm.Cart = _elm.Cart || {};
   if (_elm.Cart.values) return _elm.Cart.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $String = Elm.String.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var showCheckOut = F2(function (address,model) {    return A2($Html.div,_U.list([]),_U.list([]));});
   var cartHead = A2($Html.div,
   _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "cart-header",_1: true}]))]),
   _U.list([A2($Html.div,_U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "six-column",_1: true}]))]),_U.list([$Html.text("Товар")]))
           ,A2($Html.div,_U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "three-column",_1: true}]))]),_U.list([$Html.text("Количество")]))
           ,A2($Html.div,_U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "two-column",_1: true}]))]),_U.list([$Html.text("Цена")]))
           ,A2($Html.div,_U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "one-column",_1: true}]))]),_U.list([]))]));
   var deleteFromCart = F2(function (variantId,variants) {    return A2($List.filter,function (item) {    return !_U.eq(item.id,variantId);},variants);});
   var notInNew = function (_p0) {    var _p1 = _p0;return _p1._1;};
   var variantsIds = function (variants) {    return A2($List.map,function (_) {    return _.id;},variants);};
   var inNew = F2(function (newVariants,variant) {    return A2($List.member,variant.id,variantsIds(newVariants));});
   var addVariants = F2(function (variants,newVariants) {
      return A2($Basics._op["++"],newVariants,notInNew(A2($List.partition,inNew(newVariants),variants)));
   });
   var changeCount = F3(function (variantId,count,variant) {    return _U.eq(variant.id,variantId) ? _U.update(variant,{count: count}) : variant;});
   var CheckoutView = {ctor: "CheckoutView"};
   var CartView = {ctor: "CartView"};
   var ChangeCount = F2(function (a,b) {    return {ctor: "ChangeCount",_0: a,_1: b};});
   var DeleteFromCart = function (a) {    return {ctor: "DeleteFromCart",_0: a};};
   var Checkout = {ctor: "Checkout"};
   var Toggle = {ctor: "Toggle"};
   var AddToCart = function (a) {    return {ctor: "AddToCart",_0: a};};
   var NoOp = {ctor: "NoOp"};
   var itemView = F2(function (address,variant) {
      return A2($Html.div,
      _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "cart-product",_1: true}]))]),
      _U.list([A2($Html.div,
              _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "six-column",_1: true}]))]),
              _U.list([A2($Html.img,
                      _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "four-column",_1: true}])),$Html$Attributes.src(variant.imageUrl)]),
                      _U.list([]))
                      ,A2($Html.div,
                      _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "eight-column",_1: true}]))]),
                      _U.list([$Html.text(A2($Basics._op["++"],variant.name,A2($Basics._op["++"],". ",variant.description)))]))]))
              ,A2($Html.div,
              _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "three-column",_1: true}]))]),
              _U.list([A2($Html.input,
              _U.list([$Html$Attributes.type$("number")
                      ,$Html$Attributes.value($Basics.toString(variant.count))
                      ,$Html$Attributes.name(A2($Basics._op["++"],"product[",A2($Basics._op["++"],$Basics.toString(variant.id),"]")))
                      ,$Html$Attributes.min($Basics.toString(variant.min))
                      ,A3($Html$Events.on,
                      "input",
                      $Html$Events.targetValue,
                      function (str) {
                         var _p2 = $String.toInt(str);
                         if (_p2.ctor === "Ok") {
                               return A2($Signal.message,address,A2(ChangeCount,variant.id,_p2._0));
                            } else {
                               return A2($Signal.message,address,NoOp);
                            }
                      })]),
              _U.list([]))]))
              ,A2($Html.div,
              _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "two-column",_1: true}]))
                      ,$Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "margin-top",_1: "5px"}]))]),
              _U.list([$Html.text(A2($Basics._op["++"],$Basics.toString(variant.price),"руб."))]))
              ,A2($Html.div,
              _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "one-column",_1: true}]))]),
              _U.list([A2($Html.button,_U.list([A2($Html$Events.onClick,address,DeleteFromCart(variant.id))]),_U.list([$Html.text("×")]))]))]));
   });
   var showCart = F2(function (address,model) {
      return model.isShowed ? A2($Html.div,
      _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "cart-items",_1: true}]))]),
      A2($Basics._op["++"],
      _U.list([cartHead]),
      A2($Basics._op["++"],
      A2($List.map,itemView(address),model.variants),
      _U.list([A2($Html.div,
      _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "margin-top",_1: "20px"}]))]),
      _U.list([A2($Html.button,_U.list([A2($Html$Events.onClick,address,Checkout)]),_U.list([$Html.text("Оплатить")]))
              ,A2($Html.div,
              _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "float",_1: "right"}]))]),
              _U.list([$Html.text(A2($Basics._op["++"],
              "Итого: ",
              A2($Basics._op["++"],
              $Basics.toString($List.sum(A2($List.map,function (item) {    return $Basics.toFloat(item.count) * item.price;},model.variants))),
              "руб.")))]))]))])))) : A2($Html.div,_U.list([]),_U.list([]));
   });
   var getView = F2(function (address,model) {
      var _p3 = model.viewType;
      if (_p3.ctor === "CartView") {
            return A2(showCart,address,model);
         } else {
            return A2(showCheckOut,address,model);
         }
   });
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.div,
              _U.list([$Html$Attributes.style(_U.list([{ctor: "_Tuple2",_0: "position",_1: "fixed"}
                                                      ,{ctor: "_Tuple2",_0: "display",_1: model.isShowed ? "block" : "none"}
                                                      ,{ctor: "_Tuple2",_0: "left",_1: "0"}
                                                      ,{ctor: "_Tuple2",_0: "background",_1: "transparent"}
                                                      ,{ctor: "_Tuple2",_0: "bottom",_1: "0"}
                                                      ,{ctor: "_Tuple2",_0: "width",_1: "100%"}
                                                      ,{ctor: "_Tuple2",_0: "height",_1: "100%"}]))
                      ,A2($Html$Events.onClick,address,Toggle)
                      ,$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "product-overlay",_1: true}]))]),
              _U.list([]))
              ,A2($Html.div,
              _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "cart-container",_1: true}]))
                      ,$Html$Attributes.style(_U.list([$List.isEmpty(model.variants) ? {ctor: "_Tuple2",_0: "display",_1: "none"} : {ctor: "_Tuple2"
                                                                                                                                    ,_0: "display"
                                                                                                                                    ,_1: "block"}]))]),
              A2($Basics._op["++"],
              _U.list([A2($Html.div,
              _U.list([$Html$Attributes.classList(_U.list([{ctor: "_Tuple2",_0: "cart-button",_1: true}])),A2($Html$Events.onClick,address,Toggle)]),
              _U.list([]))]),
              _U.list([A2(getView,address,model)])))]));
   });
   var Model = F5(function (a,b,c,d,e) {    return {clientEmail: a,clientName: b,variants: c,isShowed: d,viewType: e};});
   var initModel = A5(Model,"","",_U.list([]),false,CartView);
   var init = {ctor: "_Tuple2",_0: initModel,_1: $Effects.none};
   var Variant = F7(function (a,b,c,d,e,f,g) {    return {id: a,name: b,description: c,price: d,imageUrl: e,count: f,min: g};});
   var saveToStorageMailbox = $Signal.mailbox(_U.list([]));
   var toStorage = function (variants) {
      return $Effects.task(A2($Task.map,function (_p4) {    return NoOp;},A2($Signal.send,saveToStorageMailbox.address,variants)));
   };
   var update = F2(function (action,model) {
      var _p5 = action;
      switch (_p5.ctor)
      {case "NoOp": return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         case "AddToCart": var variants = A2(addVariants,model.variants,_p5._0);
           return {ctor: "_Tuple2",_0: _U.update(model,{variants: variants}),_1: toStorage(variants)};
         case "Checkout": return {ctor: "_Tuple2",_0: _U.update(model,{viewType: CheckoutView}),_1: $Effects.none};
         case "DeleteFromCart": var variants = A2(deleteFromCart,_p5._0,model.variants);
           return {ctor: "_Tuple2",_0: _U.update(model,{variants: variants}),_1: toStorage(variants)};
         case "ChangeCount": var variants = A2($List.map,A2(changeCount,_p5._0,_p5._1),model.variants);
           return {ctor: "_Tuple2",_0: _U.update(model,{variants: variants}),_1: toStorage(variants)};
         default: return {ctor: "_Tuple2",_0: _U.update(model,{isShowed: $Basics.not(model.isShowed)}),_1: $Effects.none};}
   });
   var saveToStorage = Elm.Native.Port.make(_elm).outboundSignal("saveToStorage",
   function (v) {
      return Elm.Native.List.make(_elm).toArray(v).map(function (v) {
         return {id: v.id,name: v.name,description: v.description,price: v.price,imageUrl: v.imageUrl,count: v.count,min: v.min};
      });
   },
   saveToStorageMailbox.signal);
   var addToCart = Elm.Native.Port.make(_elm).inboundSignal("addToCart",
   "Maybe.Maybe (List Cart.Variant)",
   function (v) {
      return v === null ? Elm.Maybe.make(_elm).Nothing : Elm.Maybe.make(_elm).Just(typeof v === "object" && v instanceof Array ? Elm.Native.List.make(_elm).fromArray(v.map(function (v) {
         return typeof v === "object" && "id" in v && "name" in v && "description" in v && "price" in v && "imageUrl" in v && "count" in v && "min" in v ? {_: {}
                                                                                                                                                           ,id: typeof v.id === "number" && isFinite(v.id) && Math.floor(v.id) === v.id ? v.id : _U.badPort("an integer",
                                                                                                                                                           v.id)
                                                                                                                                                           ,name: typeof v.name === "string" || typeof v.name === "object" && v.name instanceof String ? v.name : _U.badPort("a string",
                                                                                                                                                           v.name)
                                                                                                                                                           ,description: typeof v.description === "string" || typeof v.description === "object" && v.description instanceof String ? v.description : _U.badPort("a string",
                                                                                                                                                           v.description)
                                                                                                                                                           ,price: typeof v.price === "number" ? v.price : _U.badPort("a number",
                                                                                                                                                           v.price)
                                                                                                                                                           ,imageUrl: typeof v.imageUrl === "string" || typeof v.imageUrl === "object" && v.imageUrl instanceof String ? v.imageUrl : _U.badPort("a string",
                                                                                                                                                           v.imageUrl)
                                                                                                                                                           ,count: typeof v.count === "number" && isFinite(v.count) && Math.floor(v.count) === v.count ? v.count : _U.badPort("an integer",
                                                                                                                                                           v.count)
                                                                                                                                                           ,min: typeof v.min === "number" && isFinite(v.min) && Math.floor(v.min) === v.min ? v.min : _U.badPort("an integer",
                                                                                                                                                           v.min)} : _U.badPort("an object with fields `id`, `name`, `description`, `price`, `imageUrl`, `count`, `min`",
         v);
      })) : _U.badPort("an array",v));
   });
   var toAction = function (item) {    var _p6 = item;if (_p6.ctor === "Nothing") {    return NoOp;} else {    return AddToCart(_p6._0);}};
   var toCartInput = A2($Signal.map,toAction,addToCart);
   var app = $StartApp.start({init: init,update: update,view: view,inputs: _U.list([toCartInput])});
   var main = app.html;
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",app.tasks);
   return _elm.Cart.values = {_op: _op
                             ,app: app
                             ,main: main
                             ,toAction: toAction
                             ,toCartInput: toCartInput
                             ,saveToStorageMailbox: saveToStorageMailbox
                             ,toStorage: toStorage
                             ,Variant: Variant
                             ,Model: Model
                             ,initModel: initModel
                             ,init: init
                             ,NoOp: NoOp
                             ,AddToCart: AddToCart
                             ,Toggle: Toggle
                             ,Checkout: Checkout
                             ,DeleteFromCart: DeleteFromCart
                             ,ChangeCount: ChangeCount
                             ,CartView: CartView
                             ,CheckoutView: CheckoutView
                             ,update: update
                             ,changeCount: changeCount
                             ,inNew: inNew
                             ,variantsIds: variantsIds
                             ,addVariants: addVariants
                             ,notInNew: notInNew
                             ,deleteFromCart: deleteFromCart
                             ,cartHead: cartHead
                             ,itemView: itemView
                             ,view: view
                             ,showCart: showCart
                             ,getView: getView
                             ,showCheckOut: showCheckOut};
};